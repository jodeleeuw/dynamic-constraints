var init = function(n,y){
  return repeat(n, function(){ return y; });
};

var step = function(states, p, n){
  return map(
    function(x) { return x + binomial(p,n) },
    states
  );
};

var count_complete = function(finish){
  return filter(function(x){
    return x > -1;
  }, finish).length;
}

var update_finish_times = function(finish, state, t, end){
  return map2(
    function(s,f) {
      if(f != -1) { return f; }
      if(s >= end) {
        return t;
      } else {
        return f;
      }
    },
    state,
    finish
  );
}

var accumulators = function(n, p, end, boost, finish, state, t){
  if(typeof state == 'undefined'){
    var newState = init(n,0);
    var newFinish = init(n,-1);
    return accumulators(n, p, end, boost, newFinish, newState, 1);
  } else {
    var finished_count = count_complete(finish);
    var p_this = 1 - Math.pow(1-p, 1 + boost*finished_count);
    var newState = step(state, p_this, end);
    var newFinish = update_finish_times(finish, newState, t, end);
    if(count_complete(newFinish) == n){
      return sort(newFinish);
    } else {
      return accumulators(n, p, end, boost, newFinish, newState, t+1);
    }
  }
};

var model = function(){
  return accumulators(2, 0.05, 100, 0);
};

Enumerate(model, 1);
